<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="11" total="175" passed="164">
  <reporter-output>
    <line>
      <![CDATA[【测试类场景初始化】清空分机]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备_ExtensionTest]]>
    </line>
    <line>
      <![CDATA[  【执行操作】设置系统时间为9点整]]>
    </line>
    <line>
      <![CDATA[    Pass: waitReboot重启]]>
    </line>
    <line>
      <![CDATA[  【执行操作】创建1000分机]]>
    </line>
    <line>
      <![CDATA[  【执行操作】创建FXS分机1001]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量创建分机1100-1109]]>
    </line>
    <line>
      <![CDATA[  【执行操作】SIP分机1000拨打SIP分机1001，通话]]>
    </line>
    <line>
      <![CDATA[    Pass: 1000分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1001分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】导出分机列表]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除1000分机]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除所有分机]]>
    </line>
    <line>
      <![CDATA[  【执行操作】导入分机列表]]>
    </line>
    <line>
      <![CDATA[    Pass: 1000分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1001分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 导入分机列表]]>
    </line>
    <line>
      <![CDATA[  【执行操作】通过PSTN外线B设备2000拨打A设备1000]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加分机组extgroup1]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备_NewTrunkTest]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加SIPTrunk]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加IAXTrunk]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加SPX]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加SPS]]>
    </line>
    <line>
      <![CDATA[    Pass: waitReboot重启]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器_NewTrunk]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备_CallFeatureTest]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加RingGroup]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加Queue]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加conference]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加pickupGroup]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加paging_Intercom]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加callback]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加PINList]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器_CallFeatureTest]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备_StorageTest]]>
    </line>
    <line>
      <![CDATA[  【执行操作】SD/HD/USB检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】挂载网络磁盘sharetest1]]>
    </line>
    <line>
      <![CDATA[  【执行操作】勾选Enable File Sharing]]>
    </line>
    <line>
      <![CDATA[  【执行操作】Storage Locations中CDR、Recordings和Logs下拉选择TF/SD卡,Voicemail&One Touch Recordings下拉选择sharetest1]]>
    </line>
    <line>
      <![CDATA[  【执行操作】Record Trunks全选所有Trunk、Record Extensions全选所有分机]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器_StorageTest]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备_OutboundRoutes]]>
    </line>
    <line>
      <![CDATA[    Pass: 1000分机注册]]>
    </line>
    <line>
      <![CDATA[  【执行操作】设置Time Conditions]]>
    </line>
    <line>
      <![CDATA[    Pass: TimeConditions名称错误]]>
    </line>
    <line>
      <![CDATA[  【执行操作】设置Holiday]]>
    </line>
    <line>
      <![CDATA[    Pass: TimeConditions名称错误]]>
    </line>
    <line>
      <![CDATA[  【执行操作】创建呼出路由]]>
    </line>
    <line>
      <![CDATA[  【执行操作】创建Disa]]>
    </line>
    <line>
      <![CDATA[  【执行操作】创建IVR]]>
    </line>
    <line>
      <![CDATA[  【执行操作】Sip外线呼出 1000打 903000]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：903000 实际：903000 [903000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：903000 实际：903000 [903000]】</a>]]>
    </line>
    <line>
      <![CDATA[  【执行操作】Sip外线呼出失败1001打903000]]>
    </line>
    <line>
      <![CDATA[  【执行操作】IAX外线呼出1000打903000]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：903000 实际：903000 [903000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：903000 实际：903000 [903000]】</a>]]>
    </line>
    <line>
      <![CDATA[  【执行操作】SPS外线呼出1000打902000]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：902000 实际：903000 [903000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：902000 实际：903000 [903000]】</a>]]>
    </line>
    <line>
      <![CDATA[  【执行操作】SPX外线呼出1000打902000]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：902000 实际：902000 [902000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：902000 实际：902000 [902000]】</a>]]>
    </line>
    <line>
      <![CDATA[  【执行操作】PSTN外线呼出1000打903000]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：903000 实际：903000 [903000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：903000 实际：903000 [903000]】</a>]]>
    </line>
    <line>
      <![CDATA[  【执行操作】BRI外线呼出1000打903000]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：902000 实际：902000 [902000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：902000 实际：902000 [902000]】</a>]]>
    </line>
    <line>
      <![CDATA[  【执行操作】E1外线呼出1000打903000]]>
    </line>
    <line>
      <![CDATA[  【执行操作】GSM外线呼出1000打903000]]>
    </line>
    <line>
      <![CDATA[  【执行操作】呼出路由设置Pinlist]]>
    </line>
    <line>
      <![CDATA[  【执行操作】PinList外线呼出失败1000打903000]]>
    </line>
    <line>
      <![CDATA[    Pass: 外线呼出进入pin1List]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：903000 实际：903000 [903000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：903000 实际：903000 [903000]】</a>]]>
    </line>
    <line>
      <![CDATA[  【执行操作】设置呼出路由无Pinlist]]>
    </line>
    <line>
      <![CDATA[  【执行操作】设置呼出路由无Pinlist 1000拨打903000]]>
    </line>
    <line>
      <![CDATA[  【执行操作】登录1000分机判断路由是否存在]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器_OutboundRoutes]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备_InboundRoutesTest]]>
    </line>
    <line>
      <![CDATA[  【执行操作】设置Email]]>
    </line>
    <line>
      <![CDATA[  【执行操作】创建呼入路由]]>
    </line>
    <line>
      <![CDATA[  【执行操作】注册测试分机]]>
    </line>
    <line>
      <![CDATA[    Pass: 1100分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1101分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1102分机注册]]>
    </line>
    <line>
      <![CDATA[  【执行操作】设备3通过sip外线呼入到设备1，听到IVR提示音后，按0]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】设备3通过iax外线呼入到设备1，听到IVR的提示音后，按1]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】设备2通过sps外线呼入到设备1，听到IVR的提示音后，按2]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】A拨打90+分机号码（设备3的分机），SPX通话]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】A拨打90+分机号码（设备3的分机），GSM通话]]>
    </line>
    <line>
      <![CDATA[  【执行操作】A拨打90+分机号码（设备3的分机），PSTN通话]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：903000 实际：903000 [903000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：903000 实际：903000 [903000]】</a>]]>
    </line>
    <line>
      <![CDATA[  【执行操作】A拨打90+分机号码（设备3的分机），E1通话]]>
    </line>
    <line>
      <![CDATA[  【执行操作】编辑呼入路由,设置DID]]>
    </line>
    <line>
      <![CDATA[  【执行操作】设备2通过sps外线呼入到设备（呼出前缀后+分机B）]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器InboundRoutesTest]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备FileShare_CDR]]>
    </line>
    <line>
      <![CDATA[    Pass: 1100分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1101分机注册]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除一行CDR]]>
    </line>
    <line>
      <![CDATA[  【执行操作】下载所有CDR]]>
    </line>
    <line>
      <![CDATA[  【执行操作】下载Recording]]>
    </line>
    <line>
      <![CDATA[    Pass: PlayRecord CallFrom]]>
    </line>
    <line>
      <![CDATA[    Pass: PlayRecord CallTo]]>
    </line>
    <line>
      <![CDATA[    Pass: 从分机A 1100播放录音]]>
    </line>
    <line>
      <![CDATA[  【执行操作】点击CDR中Recording Options中为蓝色的Downloader图标]]>
    </line>
    <line>
      <![CDATA[    Pass: 分机B:1101进入录音]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】登录1000分机网页查看最新的CDR]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方]]>
    </line>
    <line>
      <![CDATA[  【执行操作】返回admin用户下载Recording Options]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器FileShare_CDR]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备]]>
    </line>
    <line>
      <![CDATA[  【执行操作】编辑inrouter，Destination设置到Conference，meet1]]>
    </line>
    <line>
      <![CDATA[  【执行操作】设备A 1000 call (bri) B 2000]]>
    </line>
    <line>
      <![CDATA[  【执行操作】分机2000通过bri线路呼入到设备1的1000]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除AutoCLIP记录]]>
    </line>
    <line>
      <![CDATA[  【执行操作】设备A 1000 call (bri) B 2000呼入到会议室meet1]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备PagingFunction]]>
    </line>
    <line>
      <![CDATA[    Pass: 1000分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1100分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1101分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1102分机注册]]>
    </line>
    <line>
      <![CDATA[  【执行操作】分机B(1101)拨打6300]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加黑名单test1，分机2000通过sps线路呼入到设备1，呼入失败]]>
    </line>
    <line>
      <![CDATA[    Pass: 黑名单添加错误]]>
    </line>
    <line>
      <![CDATA[    Pass: 通话进入黑名单列表]]>
    </line>
    <line>
      <![CDATA[  【执行操作】导出黑名单]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除黑名单，分机2000通过sps线路呼入到设备1，呼入成功]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】点击“Import”，选择之前导出的文件导入]]>
    </line>
    <line>
      <![CDATA[    Pass: 导入黑名单]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加白名单test2，分机2000通过sps线路呼入到设备1，呼入成功]]>
    </line>
    <line>
      <![CDATA[    Pass: 白名单添加错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除白名单，分机2000通过sps线路呼入到设备1，呼入失败]]>
    </line>
    <line>
      <![CDATA[    Pass: 通话进入黑名单列表]]>
    </line>
    <line>
      <![CDATA[  【执行操作】导入白名单]]>
    </line>
    <line>
      <![CDATA[    Pass: 导入白名单]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除黑名单]]>
    </line>
    <line>
      <![CDATA[    Pass: 黑名单添加错误]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除白名单]]>
    </line>
    <line>
      <![CDATA[    Pass: 白名单添加错误]]>
    </line>
    <line>
      <![CDATA[  【执行操作】登录1100分机页面创建黑名单test1]]>
    </line>
    <line>
      <![CDATA[    Pass: 进入黑名单列表]]>
    </line>
    <line>
      <![CDATA[  【执行操作】1100分机页面，删除黑名单test1，分机2000通过sps呼入到设备1，呼入成功]]>
    </line>
    <line>
      <![CDATA[  【执行操作】1100分机页面，点击“Import”，选择之前导出黑名单的文件导入]]>
    </line>
    <line>
      <![CDATA[    Pass: 分机页面导入黑名单]]>
    </line>
    <line>
      <![CDATA[  【执行操作】1100分机页面，删除黑名单test1，分机2000通过sps呼入到设备1，呼入成功]]>
    </line>
    <line>
      <![CDATA[  【执行操作】1100分机页面，删除白名单，分机2000通过sps呼入到设备1，呼入失败]]>
    </line>
    <line>
      <![CDATA[    Pass: 进入黑名单列表]]>
    </line>
    <line>
      <![CDATA[  【执行操作】1100分机页面，导入白名单]]>
    </line>
    <line>
      <![CDATA[  【执行操作】1100分机页面，批量删除黑名单]]>
    </line>
    <line>
      <![CDATA[  【执行操作】1100分机页面，批量删除白名单]]>
    </line>
    <line>
      <![CDATA[  【执行操作】1100分机页面，勾选OnlyWhitelist，分机2000通过sps呼入到设备1，呼入失败]]>
    </line>
    <line>
      <![CDATA[    Pass: 进入黑名单列表]]>
    </line>
    <line>
      <![CDATA[  【执行操作】1100分机页面，取消勾选OnlyWhitelist，分机2000通过sps呼入到设备1，呼入成功]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加快速拨号，分机1000拨打*991]]>
    </line>
    <line>
      <![CDATA[    Pass: 添加speed_dial_name]]>
    </line>
    <line>
      <![CDATA[    Pass: 添加speed_dial_phoneNumber]]>
    </line>
    <line>
      <![CDATA[    <a href="file:///F:\pic\CDR呼叫方检测 【预期：1000 [1000] 实际：2000 [2000]】.jpg" target="_blank">Error: CDR呼叫方检测 【预期：1000 [1000] 实际：2000 [2000]】</a>]]>
    </line>
    <line>
      <![CDATA[  【执行操作】导出快速拨号列表]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除快速拨号列表第一条，分机1000，拨打*991]]>
    </line>
    <line>
      <![CDATA[  【执行操作】导入快速拨号列表]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除快速拨号列表]]>
    </line>
    <line>
      <![CDATA[    Pass: 添加speed_dial_name]]>
    </line>
    <line>
      <![CDATA[    Pass: 添加speed_dial_phoneNumber]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器PagingFunction]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备VoicePrompts]]>
    </line>
    <line>
      <![CDATA[    Pass: 1100分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1101分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1102分机注册]]>
    </line>
    <line>
      <![CDATA[  【执行操作】Default选择上传的一个提示音]]>
    </line>
    <line>
      <![CDATA[    Pass: 提示音更换]]>
    </line>
    <line>
      <![CDATA[  【执行操作】选择Music on Hold提示音列表的第一个提示音，点击“Play”在1100播放]]>
    </line>
    <line>
      <![CDATA[    Pass: 等待音乐播放]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除Music on Hold提示音列表的第一个提示音]]>
    </line>
    <line>
      <![CDATA[  【执行操作】创建一个新的playlist]]>
    </line>
    <line>
      <![CDATA[    Pass: play1新增的等待提示音列表为空]]>
    </line>
    <line>
      <![CDATA[  【执行操作】新的playlist上传音乐molihua.wav]]>
    </line>
    <line>
      <![CDATA[    Pass: play1等待音乐播放]]>
    </line>
    <line>
      <![CDATA[  【执行操作】Voice Prompts->Prompt Preference中的Music on Hold选择play1,分机1100拨打6400]]>
    </line>
    <line>
      <![CDATA[    Pass: 播放play1中的xxx提示音]]>
    </line>
    <line>
      <![CDATA[  【执行操作】全选所有提示音，点击“Delete”]]>
    </line>
    <line>
      <![CDATA[  【执行操作】录一个新的录音作为提示音]]>
    </line>
    <line>
      <![CDATA[    Pass: RecordFile 开始录音]]>
    </line>
    <line>
      <![CDATA[    Pass: 自定义提示音生成]]>
    </line>
    <line>
      <![CDATA[  【执行操作】上传一个音乐作为提示音]]>
    </line>
    <line>
      <![CDATA[    Pass: custom Prompts音乐播放]]>
    </line>
    <line>
      <![CDATA[  【执行操作】上传一个音乐作为提示音]]>
    </line>
    <line>
      <![CDATA[    Pass: custom record重新录音]]>
    </line>
    <line>
      <![CDATA[  【执行操作】下载自定义提示音]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除第一个自定义提示音]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除全部自定义提示音]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器_VoicePrompts]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备]]>
    </line>
    <line>
      <![CDATA[    Pass: 1100分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1101分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1102分机注册]]>
    </line>
    <line>
      <![CDATA[  【执行操作】Transfer：分机A打给分机B，通过过程中，A拨打*3C]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】Transfer：分机A打给分机B，通过过程中，A拨打*03C]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】CallPickup：分机A打给C，分机C响铃中，分机B拨打*04C截答]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】CallPickup：分机C打给分机B，分机B响铃中，分机A拨打*4截答]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测错误]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】CallParking：分机A打给分机B，通话过程中，A拨打*6，15s后，分机A拨打6900]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[  【执行操作】CallParking：分机A打给分机B，通话过程中，分机A拨打*066950，15s后，分机A拨打6950]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备]]>
    </line>
    <line>
      <![CDATA[    Pass: 1100分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1101分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1102分机注册]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加紧急呼叫号码]]>
    </line>
    <line>
      <![CDATA[  【执行操作】分机C通过PSTN线路呼出，通话中。分机1100直接拨打紧急号码2001]]>
    </line>
    <line>
      <![CDATA[    Pass: 进入紧急呼叫]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：902000 实际：902000 [902000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：902000 实际：902000 [902000]】</a>]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除紧急号码]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除紧急号码]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除单个IVR]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除IVR]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除单个ringGroup]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除ringGroup]]>
    </line>
    <line>
      <![CDATA[  【执行操作】单个删除Queue]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除Queue]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除单个Conference]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除Conference]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除单个PinckupGruop]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除PinckupGruop]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除单个PagingIntercom]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除PagingIntercom]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除单个Callback]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除CallBack]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除单个Disa]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除disa1]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除单个PINList]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除Pin1]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除单个OutboundRoutes]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除OutboundRoutes]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除单个inboundRoutes]]>
    </line>
    <line>
      <![CDATA[  【执行操作】批量删除inboundRoutes]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备_Network]]>
    </line>
    <line>
      <![CDATA[  【执行操作】修改网络设置]]>
    </line>
    <line>
      <![CDATA[    Pass: waitReboot重启]]>
    </line>
    <line>
      <![CDATA[  【执行操作】从wan口IP登录]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备_Security]]>
    </line>
    <line>
      <![CDATA[  【执行操作】网页访问协议设置HTTP，开启ssh端口22]]>
    </line>
    <line>
      <![CDATA[  【执行操作】连接SSH]]>
    </line>
    <line>
      <![CDATA[    Pass: 连接SSH]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备_UserPermission]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加UserPermession,admin权限]]>
    </line>
    <line>
      <![CDATA[    Pass: 新添加的User]]>
    </line>
    <line>
      <![CDATA[    Pass: 新添加的Role]]>
    </line>
    <line>
      <![CDATA[  【执行操作】登录分机A 1100的页面，检查主菜单内所有勾选功能]]>
    </line>
    <line>
      <![CDATA[  【执行操作】User设置为分机B 1101，Set Privilege As为Custom，网页设置项默认未勾选，勾选PBX、Auto Provisioning]]>
    </line>
    <line>
      <![CDATA[  【执行操作】登录分机A 1101的页面，检查主菜单内所有勾选功能]]>
    </line>
    <line>
      <![CDATA[    Pass: Setting界面只有PBX]]>
    </line>
    <line>
      <![CDATA[    Pass: Setting界面只有PBX]]>
    </line>
    <line>
      <![CDATA[  【执行操作】选择User为分机A的数据，点击“Delete”图标，点击yes]]>
    </line>
    <line>
      <![CDATA[  【执行操作】登录分机A 1101的页面，检查主菜单内只有ME功能]]>
    </line>
    <line>
      <![CDATA[  【执行操作】勾选全部UserPermission,删除]]>
    </line>
    <line>
      <![CDATA[    Pass: 全部UserPermission,删除]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备_DateTime]]>
    </line>
    <line>
      <![CDATA[  【执行操作】设置Time Zone为8 China (Beijing)]]>
    </line>
    <line>
      <![CDATA[    Pass: waitReboot重启]]>
    </line>
    <line>
      <![CDATA[  【执行操作】分机A打给分机B，通话10s]]>
    </line>
    <line>
      <![CDATA[    Pass: 1100分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: 1101分机注册]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫时间检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR呼叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR被叫方检测]]>
    </line>
    <line>
      <![CDATA[    Pass: CDR_Status检测]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备_EventCenter]]>
    </line>
    <line>
      <![CDATA[    Pass: 1100分机注册]]>
    </line>
    <line>
      <![CDATA[  【执行操作】Add Contact]]>
    </line>
    <line>
      <![CDATA[    Pass: 事件通知分机号]]>
    </line>
    <line>
      <![CDATA[    Pass: 事件通知方式]]>
    </line>
    <line>
      <![CDATA[  【执行操作】执行的操作]]>
    </line>
    <line>
      <![CDATA[  【执行操作】分机1100响铃接听]]>
    </line>
    <line>
      <![CDATA[    Pass: 分机1100接听]]>
    </line>
    <line>
      <![CDATA[  【执行操作】查看Event log]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除Notification列表]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除Notification分机1100不响铃]]>
    </line>
    <line>
      <![CDATA[    Pass: 分机1100未接听]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除Notification后查看Event log]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器]]>
    </line>
    <line>
      <![CDATA[【测试类场景初始化】打开游览器并登录设备_Maintain]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加备份文件]]>
    </line>
    <line>
      <![CDATA[  【执行操作】下载备份包]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除备份文件]]>
    </line>
    <line>
      <![CDATA[  【执行操作】点击“Upload”，选择刚下载的备份包，点击“Upload”]]>
    </line>
    <line>
      <![CDATA[  【执行操作】设置BackupSchedule]]>
    </line>
    <line>
      <![CDATA[  【执行操作】选择当前日期的系前一天的系统日志,删除]]>
    </line>
    <line>
      <![CDATA[  【执行操作】下载全部日志]]>
    </line>
    <line>
      <![CDATA[  【执行操作】删除全部系统日志]]>
    </line>
    <line>
      <![CDATA[  【执行操作】添加一个分机，检测操作日志]]>
    </line>
    <line>
      <![CDATA[    Pass: 操作日志User]]>
    </line>
    <line>
      <![CDATA[【测试类场景恢复】关闭游览器]]>
    </line>
  </reporter-output>
  <suite name="SYSCORE" duration-ms="804838" started-at="2017-08-30T03:15:42Z" finished-at="2017-08-30T03:29:07Z">
    <groups>
    </groups>
    <test name="syscore" duration-ms="804838" started-at="2017-08-30T03:15:42Z" finished-at="2017-08-30T03:29:07Z">
      <class name="com.yeastar.swebtest.testcase.smokecase.syscase.DateTime">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.DateTime@6be70a]" name="BeforeClass" is-config="true" duration-ms="8810" started-at="2017-08-30T11:21:25Z" finished-at="2017-08-30T11:21:34Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备_DateTime]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="A_SetTimeZone()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.DateTime@6be70a]" name="A_SetTimeZone" duration-ms="125632" started-at="2017-08-30T11:21:34Z" finished-at="2017-08-30T11:23:40Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】设置Time Zone为8 China (Beijing)]]>
            </line>
            <line>
              <![CDATA[    Pass: waitReboot重启]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_SetTimeZone -->
        <test-method status="PASS" signature="B_CallTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.DateTime@6be70a]" name="B_CallTest" duration-ms="45556" started-at="2017-08-30T11:23:40Z" finished-at="2017-08-30T11:24:25Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】分机A打给分机B，通话10s]]>
            </line>
            <line>
              <![CDATA[    Pass: 1100分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1101分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫时间检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_CallTest -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.DateTime@6be70a]" name="AfterClass" is-config="true" duration-ms="17101" started-at="2017-08-30T11:24:25Z" finished-at="2017-08-30T11:24:42Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.syscase.DateTime -->
      <class name="com.yeastar.swebtest.testcase.smokecase.syscase.Maintain">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Maintain@556333]" name="BeforeClass" is-config="true" duration-ms="9172" started-at="2017-08-30T11:27:01Z" finished-at="2017-08-30T11:27:10Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备_Maintain]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="A_BackupRestore()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Maintain@556333]" name="A_BackupRestore" duration-ms="15772" started-at="2017-08-30T11:27:10Z" finished-at="2017-08-30T11:27:26Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加备份文件]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_BackupRestore -->
        <test-method status="PASS" signature="B_DownloadBackUptar()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Maintain@556333]" name="B_DownloadBackUptar" duration-ms="6131" started-at="2017-08-30T11:27:26Z" finished-at="2017-08-30T11:27:32Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】下载备份包]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_DownloadBackUptar -->
        <test-method status="PASS" signature="E_DeleteBackUp()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Maintain@556333]" name="E_DeleteBackUp" duration-ms="17477" started-at="2017-08-30T11:27:32Z" finished-at="2017-08-30T11:27:49Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除备份文件]]>
            </line>
          </reporter-output>
        </test-method> <!-- E_DeleteBackUp -->
        <test-method status="PASS" signature="F_UploadBackUp()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Maintain@556333]" name="F_UploadBackUp" duration-ms="0" started-at="2017-08-30T11:27:49Z" finished-at="2017-08-30T11:27:49Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】点击“Upload”，选择刚下载的备份包，点击“Upload”]]>
            </line>
          </reporter-output>
        </test-method> <!-- F_UploadBackUp -->
        <test-method status="PASS" signature="H_BackupSchedule()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Maintain@556333]" name="H_BackupSchedule" duration-ms="7496" started-at="2017-08-30T11:27:49Z" finished-at="2017-08-30T11:27:57Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】设置BackupSchedule]]>
            </line>
          </reporter-output>
        </test-method> <!-- H_BackupSchedule -->
        <test-method status="PASS" signature="L_DeleteSystemLog()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Maintain@556333]" name="L_DeleteSystemLog" duration-ms="11524" started-at="2017-08-30T11:27:57Z" finished-at="2017-08-30T11:28:08Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】选择当前日期的系前一天的系统日志,删除]]>
            </line>
          </reporter-output>
        </test-method> <!-- L_DeleteSystemLog -->
        <test-method status="PASS" signature="M_DownloadSystemLog()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Maintain@556333]" name="M_DownloadSystemLog" duration-ms="7001" started-at="2017-08-30T11:28:08Z" finished-at="2017-08-30T11:28:15Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】下载全部日志]]>
            </line>
          </reporter-output>
        </test-method> <!-- M_DownloadSystemLog -->
        <test-method status="PASS" signature="N_DeleteAllSystemLog()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Maintain@556333]" name="N_DeleteAllSystemLog" duration-ms="7248" started-at="2017-08-30T11:28:15Z" finished-at="2017-08-30T11:28:22Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除全部系统日志]]>
            </line>
          </reporter-output>
        </test-method> <!-- N_DeleteAllSystemLog -->
        <test-method status="PASS" signature="O_OperateLog()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Maintain@556333]" name="O_OperateLog" duration-ms="28171" started-at="2017-08-30T11:28:22Z" finished-at="2017-08-30T11:28:51Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加一个分机，检测操作日志]]>
            </line>
            <line>
              <![CDATA[    Pass: 操作日志User]]>
            </line>
          </reporter-output>
        </test-method> <!-- O_OperateLog -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Maintain@556333]" name="AfterClass" is-config="true" duration-ms="15918" started-at="2017-08-30T11:28:51Z" finished-at="2017-08-30T11:29:07Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.syscase.Maintain -->
      <class name="com.yeastar.swebtest.testcase.smokecase.syscase.UserPermission">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.UserPermission@9a3d1d]" name="BeforeClass" is-config="true" duration-ms="9190" started-at="2017-08-30T11:19:19Z" finished-at="2017-08-30T11:19:28Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备_UserPermission]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="CaseName()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.UserPermission@9a3d1d]" name="CaseName" is-config="true" duration-ms="1500" started-at="2017-08-30T11:19:28Z" finished-at="2017-08-30T11:19:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CaseName -->
        <test-method status="PASS" signature="A_AddUserPermissionAdmin()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.UserPermission@9a3d1d]" name="A_AddUserPermissionAdmin" duration-ms="21856" started-at="2017-08-30T11:19:29Z" finished-at="2017-08-30T11:19:51Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加UserPermession,admin权限]]>
            </line>
            <line>
              <![CDATA[    Pass: 新添加的User]]>
            </line>
            <line>
              <![CDATA[    Pass: 新添加的Role]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_AddUserPermissionAdmin -->
        <test-method status="PASS" signature="B_CheckUserPermisson()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.UserPermission@9a3d1d]" name="B_CheckUserPermisson" duration-ms="4760" started-at="2017-08-30T11:19:51Z" finished-at="2017-08-30T11:19:56Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】登录分机A 1100的页面，检查主菜单内所有勾选功能]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_CheckUserPermisson -->
        <test-method status="PASS" signature="C_AddUserPermissionCustom()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.UserPermission@9a3d1d]" name="C_AddUserPermissionCustom" duration-ms="38123" started-at="2017-08-30T11:19:56Z" finished-at="2017-08-30T11:20:34Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】User设置为分机B 1101，Set Privilege As为Custom，网页设置项默认未勾选，勾选PBX、Auto Provisioning]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_AddUserPermissionCustom -->
        <test-method status="PASS" signature="D_CheckUserPerssion()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.UserPermission@9a3d1d]" name="D_CheckUserPerssion" duration-ms="6642" started-at="2017-08-30T11:20:34Z" finished-at="2017-08-30T11:20:41Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】登录分机A 1101的页面，检查主菜单内所有勾选功能]]>
            </line>
            <line>
              <![CDATA[    Pass: Setting界面只有PBX]]>
            </line>
            <line>
              <![CDATA[    Pass: Setting界面只有PBX]]>
            </line>
          </reporter-output>
        </test-method> <!-- D_CheckUserPerssion -->
        <test-method status="PASS" signature="E_Delete()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.UserPermission@9a3d1d]" name="E_Delete" duration-ms="12220" started-at="2017-08-30T11:20:41Z" finished-at="2017-08-30T11:20:53Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】选择User为分机A的数据，点击“Delete”图标，点击yes]]>
            </line>
          </reporter-output>
        </test-method> <!-- E_Delete -->
        <test-method status="PASS" signature="F_CheckUserPerssion()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.UserPermission@9a3d1d]" name="F_CheckUserPerssion" duration-ms="4211" started-at="2017-08-30T11:20:53Z" finished-at="2017-08-30T11:20:57Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】登录分机A 1101的页面，检查主菜单内只有ME功能]]>
            </line>
          </reporter-output>
        </test-method> <!-- F_CheckUserPerssion -->
        <test-method status="PASS" signature="G_DeleteAll()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.UserPermission@9a3d1d]" name="G_DeleteAll" duration-ms="12355" started-at="2017-08-30T11:20:57Z" finished-at="2017-08-30T11:21:09Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】勾选全部UserPermission,删除]]>
            </line>
            <line>
              <![CDATA[    Pass: 全部UserPermission,删除]]>
            </line>
          </reporter-output>
        </test-method> <!-- G_DeleteAll -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.UserPermission@9a3d1d]" name="AfterClass" is-config="true" duration-ms="15923" started-at="2017-08-30T11:21:09Z" finished-at="2017-08-30T11:21:25Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.syscase.UserPermission -->
      <class name="com.yeastar.swebtest.testcase.smokecase.syscase.Network">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Network@80503]" name="BeforeClass" is-config="true" duration-ms="13041" started-at="2017-08-30T11:15:42Z" finished-at="2017-08-30T11:15:55Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备_Network]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="A_DualSetting()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Network@80503]" name="A_DualSetting" duration-ms="115197" started-at="2017-08-30T11:15:55Z" finished-at="2017-08-30T11:17:50Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】修改网络设置]]>
            </line>
            <line>
              <![CDATA[    Pass: waitReboot重启]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_DualSetting -->
        <test-method status="PASS" signature="B_DualSetting()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Network@80503]" name="B_DualSetting" duration-ms="26374" started-at="2017-08-30T11:17:50Z" finished-at="2017-08-30T11:18:16Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】从wan口IP登录]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_DualSetting -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Network@80503]" name="AfterClass" is-config="true" duration-ms="15786" started-at="2017-08-30T11:18:16Z" finished-at="2017-08-30T11:18:32Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.syscase.Network -->
      <class name="com.yeastar.swebtest.testcase.smokecase.syscase.Security">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Security@1553d26]" name="BeforeClass" is-config="true" duration-ms="12792" started-at="2017-08-30T11:18:32Z" finished-at="2017-08-30T11:18:45Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备_Security]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="B_SetService()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Security@1553d26]" name="B_SetService" duration-ms="17217" started-at="2017-08-30T11:18:45Z" finished-at="2017-08-30T11:19:02Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】网页访问协议设置HTTP，开启ssh端口22]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_SetService -->
        <test-method status="PASS" signature="C_ConnectToSSH()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Security@1553d26]" name="C_ConnectToSSH" duration-ms="560" started-at="2017-08-30T11:19:02Z" finished-at="2017-08-30T11:19:03Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】连接SSH]]>
            </line>
            <line>
              <![CDATA[    Pass: 连接SSH]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_ConnectToSSH -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.Security@1553d26]" name="AfterClass" is-config="true" duration-ms="15824" started-at="2017-08-30T11:19:03Z" finished-at="2017-08-30T11:19:19Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.syscase.Security -->
      <class name="com.yeastar.swebtest.testcase.smokecase.syscase.EventCenter">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.EventCenter@bdb19]" name="BeforeClass" is-config="true" duration-ms="11790" started-at="2017-08-30T11:24:42Z" finished-at="2017-08-30T11:24:54Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备_EventCenter]]>
            </line>
            <line>
              <![CDATA[    Pass: 1100分机注册]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="A_AddContact()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.EventCenter@bdb19]" name="A_AddContact" duration-ms="18487" started-at="2017-08-30T11:24:54Z" finished-at="2017-08-30T11:25:13Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】Add Contact]]>
            </line>
            <line>
              <![CDATA[    Pass: 事件通知分机号]]>
            </line>
            <line>
              <![CDATA[    Pass: 事件通知方式]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_AddContact -->
        <test-method status="PASS" signature="B_EventSettings()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.EventCenter@bdb19]" name="B_EventSettings" duration-ms="6398" started-at="2017-08-30T11:25:13Z" finished-at="2017-08-30T11:25:19Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】执行的操作]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_EventSettings -->
        <test-method status="PASS" signature="C_Answer()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.EventCenter@bdb19]" name="C_Answer" duration-ms="25641" started-at="2017-08-30T11:25:19Z" finished-at="2017-08-30T11:25:45Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】分机1100响铃接听]]>
            </line>
            <line>
              <![CDATA[    Pass: 分机1100接听]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_Answer -->
        <test-method status="PASS" signature="D_CheckEventLog()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.EventCenter@bdb19]" name="D_CheckEventLog" duration-ms="12896" started-at="2017-08-30T11:25:45Z" finished-at="2017-08-30T11:25:58Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】查看Event log]]>
            </line>
          </reporter-output>
        </test-method> <!-- D_CheckEventLog -->
        <test-method status="PASS" signature="E_DeleteNotification()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.EventCenter@bdb19]" name="E_DeleteNotification" duration-ms="8323" started-at="2017-08-30T11:25:58Z" finished-at="2017-08-30T11:26:06Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除Notification列表]]>
            </line>
          </reporter-output>
        </test-method> <!-- E_DeleteNotification -->
        <test-method status="PASS" signature="F_CheckLog()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.EventCenter@bdb19]" name="F_CheckLog" duration-ms="24317" started-at="2017-08-30T11:26:06Z" finished-at="2017-08-30T11:26:30Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除Notification分机1100不响铃]]>
            </line>
            <line>
              <![CDATA[    Pass: 分机1100未接听]]>
            </line>
          </reporter-output>
        </test-method> <!-- F_CheckLog -->
        <test-method status="PASS" signature="G_CheckLog()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.EventCenter@bdb19]" name="G_CheckLog" duration-ms="13077" started-at="2017-08-30T11:26:30Z" finished-at="2017-08-30T11:26:43Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除Notification后查看Event log]]>
            </line>
          </reporter-output>
        </test-method> <!-- G_CheckLog -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.syscase.EventCenter@bdb19]" name="AfterClass" is-config="true" duration-ms="17305" started-at="2017-08-30T11:26:43Z" finished-at="2017-08-30T11:27:01Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.syscase.EventCenter -->
    </test> <!-- syscore -->
  </suite> <!-- SYSCORE -->
  <suite name="PBXCORE" duration-ms="4713805" started-at="2017-08-30T01:57:08Z" finished-at="2017-08-30T03:15:42Z">
    <groups>
    </groups>
    <test name="pbxcore" duration-ms="4713805" started-at="2017-08-30T01:57:08Z" finished-at="2017-08-30T03:15:42Z">
      <class name="com.yeastar.swebtest.testcase.smokecase.pbxcase.Storage">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Storage@d41cee]" name="BeforeClass" is-config="true" duration-ms="13455" started-at="2017-08-30T10:10:59Z" finished-at="2017-08-30T10:11:12Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备_StorageTest]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="A_JudgeStorage()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Storage@d41cee]" name="A_JudgeStorage" duration-ms="12455" started-at="2017-08-30T10:11:12Z" finished-at="2017-08-30T10:11:25Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】SD/HD/USB检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_JudgeStorage -->
        <test-method status="PASS" signature="B_AddNetworkDrive()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Storage@d41cee]" name="B_AddNetworkDrive" duration-ms="12411" started-at="2017-08-30T10:11:25Z" finished-at="2017-08-30T10:11:37Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】挂载网络磁盘sharetest1]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_AddNetworkDrive -->
        <test-method status="PASS" signature="C_SetFileShare()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Storage@d41cee]" name="C_SetFileShare" duration-ms="336" started-at="2017-08-30T10:11:37Z" finished-at="2017-08-30T10:11:38Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】勾选Enable File Sharing]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_SetFileShare -->
        <test-method status="PASS" signature="D_StorageLocations()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Storage@d41cee]" name="D_StorageLocations" duration-ms="4330" started-at="2017-08-30T10:11:38Z" finished-at="2017-08-30T10:11:42Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】Storage Locations中CDR、Recordings和Logs下拉选择TF/SD卡,Voicemail&One Touch Recordings下拉选择sharetest1]]>
            </line>
          </reporter-output>
        </test-method> <!-- D_StorageLocations -->
        <test-method status="PASS" signature="E_Recording_Settings()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Storage@d41cee]" name="E_Recording_Settings" duration-ms="22665" started-at="2017-08-30T10:11:42Z" finished-at="2017-08-30T10:12:05Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】Record Trunks全选所有Trunk、Record Extensions全选所有分机]]>
            </line>
          </reporter-output>
        </test-method> <!-- E_Recording_Settings -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Storage@d41cee]" name="AfterClass" is-config="true" duration-ms="20804" started-at="2017-08-30T10:12:05Z" finished-at="2017-08-30T10:12:25Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器_StorageTest]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.pbxcase.Storage -->
      <class name="com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFeature">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFeature@1579e0f]" name="BeforeClass" is-config="true" duration-ms="12165" started-at="2017-08-30T10:08:43Z" finished-at="2017-08-30T10:08:56Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备_CallFeatureTest]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="A_RingGroup()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFeature@1579e0f]" name="A_RingGroup" duration-ms="21684" started-at="2017-08-30T10:08:56Z" finished-at="2017-08-30T10:09:17Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加RingGroup]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_RingGroup -->
        <test-method status="PASS" signature="B_Queue()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFeature@1579e0f]" name="B_Queue" duration-ms="14119" started-at="2017-08-30T10:09:17Z" finished-at="2017-08-30T10:09:31Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加Queue]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_Queue -->
        <test-method status="PASS" signature="C_Conference()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFeature@1579e0f]" name="C_Conference" duration-ms="6332" started-at="2017-08-30T10:09:31Z" finished-at="2017-08-30T10:09:38Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加conference]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_Conference -->
        <test-method status="PASS" signature="D_PickupGroup()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFeature@1579e0f]" name="D_PickupGroup" duration-ms="16344" started-at="2017-08-30T10:09:38Z" finished-at="2017-08-30T10:09:54Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加pickupGroup]]>
            </line>
          </reporter-output>
        </test-method> <!-- D_PickupGroup -->
        <test-method status="PASS" signature="E_PagingIntercom()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFeature@1579e0f]" name="E_PagingIntercom" duration-ms="10942" started-at="2017-08-30T10:09:54Z" finished-at="2017-08-30T10:10:05Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加paging_Intercom]]>
            </line>
          </reporter-output>
        </test-method> <!-- E_PagingIntercom -->
        <test-method status="PASS" signature="F_CallBack()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFeature@1579e0f]" name="F_CallBack" duration-ms="18893" started-at="2017-08-30T10:10:05Z" finished-at="2017-08-30T10:10:24Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加callback]]>
            </line>
          </reporter-output>
        </test-method> <!-- F_CallBack -->
        <test-method status="PASS" signature="F_PINList()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFeature@1579e0f]" name="F_PINList" duration-ms="14093" started-at="2017-08-30T10:10:24Z" finished-at="2017-08-30T10:10:38Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加PINList]]>
            </line>
          </reporter-output>
        </test-method> <!-- F_PINList -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFeature@1579e0f]" name="AfterClass" is-config="true" duration-ms="20858" started-at="2017-08-30T10:10:38Z" finished-at="2017-08-30T10:10:59Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器_CallFeatureTest]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFeature -->
      <class name="com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR@13f88ab]" name="BeforeClass" is-config="true" duration-ms="24788" started-at="2017-08-30T10:30:17Z" finished-at="2017-08-30T10:30:41Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备FileShare_CDR]]>
            </line>
            <line>
              <![CDATA[    Pass: 1100分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1101分机注册]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="A_FileShare()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR@13f88ab]" name="A_FileShare" duration-ms="0" started-at="2017-08-30T10:30:41Z" finished-at="2017-08-30T10:30:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- A_FileShare -->
        <test-method status="PASS" signature="B_DelCdr()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR@13f88ab]" name="B_DelCdr" duration-ms="11321" started-at="2017-08-30T10:30:41Z" finished-at="2017-08-30T10:30:53Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除一行CDR]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_DelCdr -->
        <test-method status="PASS" signature="C_DownloadCDR()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR@13f88ab]" name="C_DownloadCDR" duration-ms="567" started-at="2017-08-30T10:30:53Z" finished-at="2017-08-30T10:30:53Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】下载所有CDR]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_DownloadCDR -->
        <test-method status="PASS" signature="D_Recording()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR@13f88ab]" name="D_Recording" duration-ms="1425" started-at="2017-08-30T10:30:53Z" finished-at="2017-08-30T10:30:55Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】下载Recording]]>
            </line>
          </reporter-output>
        </test-method> <!-- D_Recording -->
        <test-method status="PASS" signature="E_RecordingPlay()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR@13f88ab]" name="E_RecordingPlay" duration-ms="39725" started-at="2017-08-30T10:30:55Z" finished-at="2017-08-30T10:31:34Z">
          <reporter-output>
            <line>
              <![CDATA[    Pass: PlayRecord CallFrom]]>
            </line>
            <line>
              <![CDATA[    Pass: PlayRecord CallTo]]>
            </line>
            <line>
              <![CDATA[    Pass: 从分机A 1100播放录音]]>
            </line>
          </reporter-output>
        </test-method> <!-- E_RecordingPlay -->
        <test-method status="PASS" signature="F_Downloader()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR@13f88ab]" name="F_Downloader" duration-ms="23423" started-at="2017-08-30T10:31:34Z" finished-at="2017-08-30T10:31:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- F_Downloader -->
        <test-method status="PASS" signature="G_DeleteallCDR()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR@13f88ab]" name="G_DeleteallCDR" duration-ms="213" started-at="2017-08-30T10:31:58Z" finished-at="2017-08-30T10:31:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- G_DeleteallCDR -->
        <test-method status="PASS" signature="H_PromprPreference()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR@13f88ab]" name="H_PromprPreference" duration-ms="71256" started-at="2017-08-30T10:31:58Z" finished-at="2017-08-30T10:33:09Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】点击CDR中Recording Options中为蓝色的Downloader图标]]>
            </line>
            <line>
              <![CDATA[    Pass: 分机B:1101进入录音]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- H_PromprPreference -->
        <test-method status="PASS" signature="I_Me_CDRRecording()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR@13f88ab]" name="I_Me_CDRRecording" duration-ms="29480" started-at="2017-08-30T10:33:09Z" finished-at="2017-08-30T10:33:39Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】登录1000分机网页查看最新的CDR]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方]]>
            </line>
          </reporter-output>
        </test-method> <!-- I_Me_CDRRecording -->
        <test-method status="PASS" signature="J_DownloaderPrompt()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR@13f88ab]" name="J_DownloaderPrompt" duration-ms="28975" started-at="2017-08-30T10:33:39Z" finished-at="2017-08-30T10:34:08Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】返回admin用户下载Recording Options]]>
            </line>
          </reporter-output>
        </test-method> <!-- J_DownloaderPrompt -->
        <test-method status="PASS" signature="K_DeleteSharetest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR@13f88ab]" name="K_DeleteSharetest" duration-ms="23686" started-at="2017-08-30T10:34:08Z" finished-at="2017-08-30T10:34:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- K_DeleteSharetest -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR@13f88ab]" name="AfterClass" is-config="true" duration-ms="22056" started-at="2017-08-30T10:34:32Z" finished-at="2017-08-30T10:34:54Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器FileShare_CDR]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.pbxcase.FileShare_CDR -->
      <class name="com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeforeClass" is-config="true" duration-ms="12906" started-at="2017-08-30T11:07:03Z" finished-at="2017-08-30T11:07:16Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:07:16Z" finished-at="2017-08-30T11:07:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="A_IVR()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="A_IVR" duration-ms="12085" started-at="2017-08-30T11:07:17Z" finished-at="2017-08-30T11:07:29Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除单个IVR]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_IVR -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:07:29Z" finished-at="2017-08-30T11:07:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="B_IVR()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="B_IVR" duration-ms="26331" started-at="2017-08-30T11:07:31Z" finished-at="2017-08-30T11:07:57Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除IVR]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_IVR -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1501" started-at="2017-08-30T11:07:57Z" finished-at="2017-08-30T11:07:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="C_RingGroup()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="C_RingGroup" duration-ms="8955" started-at="2017-08-30T11:07:59Z" finished-at="2017-08-30T11:08:08Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除单个ringGroup]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_RingGroup -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:08:08Z" finished-at="2017-08-30T11:08:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="D_RingGroup()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="D_RingGroup" duration-ms="33305" started-at="2017-08-30T11:08:09Z" finished-at="2017-08-30T11:08:43Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除ringGroup]]>
            </line>
          </reporter-output>
        </test-method> <!-- D_RingGroup -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:08:43Z" finished-at="2017-08-30T11:08:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="E_Queue()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="E_Queue" duration-ms="9063" started-at="2017-08-30T11:08:44Z" finished-at="2017-08-30T11:08:53Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】单个删除Queue]]>
            </line>
          </reporter-output>
        </test-method> <!-- E_Queue -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:08:53Z" finished-at="2017-08-30T11:08:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="F_Queue()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="F_Queue" duration-ms="37684" started-at="2017-08-30T11:08:55Z" finished-at="2017-08-30T11:09:32Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除Queue]]>
            </line>
          </reporter-output>
        </test-method> <!-- F_Queue -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:09:32Z" finished-at="2017-08-30T11:09:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="G_Conference()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="G_Conference" duration-ms="8943" started-at="2017-08-30T11:09:34Z" finished-at="2017-08-30T11:09:43Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除单个Conference]]>
            </line>
          </reporter-output>
        </test-method> <!-- G_Conference -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1501" started-at="2017-08-30T11:09:43Z" finished-at="2017-08-30T11:09:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="H_Conferene()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="H_Conferene" duration-ms="16943" started-at="2017-08-30T11:09:44Z" finished-at="2017-08-30T11:10:01Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除Conference]]>
            </line>
          </reporter-output>
        </test-method> <!-- H_Conferene -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:10:01Z" finished-at="2017-08-30T11:10:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="I_PickupGroup()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="I_PickupGroup" duration-ms="8949" started-at="2017-08-30T11:10:03Z" finished-at="2017-08-30T11:10:12Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除单个PinckupGruop]]>
            </line>
          </reporter-output>
        </test-method> <!-- I_PickupGroup -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:10:12Z" finished-at="2017-08-30T11:10:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="J_PickupGroup()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="J_PickupGroup" duration-ms="37979" started-at="2017-08-30T11:10:13Z" finished-at="2017-08-30T11:10:51Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除PinckupGruop]]>
            </line>
          </reporter-output>
        </test-method> <!-- J_PickupGroup -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1501" started-at="2017-08-30T11:10:51Z" finished-at="2017-08-30T11:10:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="K_PagingIntercom()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="K_PagingIntercom" duration-ms="8934" started-at="2017-08-30T11:10:53Z" finished-at="2017-08-30T11:11:02Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除单个PagingIntercom]]>
            </line>
          </reporter-output>
        </test-method> <!-- K_PagingIntercom -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:11:02Z" finished-at="2017-08-30T11:11:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="L_PagingIntercom()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="L_PagingIntercom" duration-ms="19651" started-at="2017-08-30T11:11:03Z" finished-at="2017-08-30T11:11:23Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除PagingIntercom]]>
            </line>
          </reporter-output>
        </test-method> <!-- L_PagingIntercom -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:11:23Z" finished-at="2017-08-30T11:11:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="M_CallBack()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="M_CallBack" duration-ms="9270" started-at="2017-08-30T11:11:24Z" finished-at="2017-08-30T11:11:34Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除单个Callback]]>
            </line>
          </reporter-output>
        </test-method> <!-- M_CallBack -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:11:34Z" finished-at="2017-08-30T11:11:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="N_CallBack()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="N_CallBack" duration-ms="31627" started-at="2017-08-30T11:11:35Z" finished-at="2017-08-30T11:12:07Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除CallBack]]>
            </line>
          </reporter-output>
        </test-method> <!-- N_CallBack -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:12:07Z" finished-at="2017-08-30T11:12:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="O_Disa()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="O_Disa" duration-ms="8912" started-at="2017-08-30T11:12:08Z" finished-at="2017-08-30T11:12:17Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除单个Disa]]>
            </line>
          </reporter-output>
        </test-method> <!-- O_Disa -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:12:17Z" finished-at="2017-08-30T11:12:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="P_Disa()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="P_Disa" duration-ms="42964" started-at="2017-08-30T11:12:19Z" finished-at="2017-08-30T11:13:02Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除disa1]]>
            </line>
          </reporter-output>
        </test-method> <!-- P_Disa -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:13:02Z" finished-at="2017-08-30T11:13:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="R_PINList()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="R_PINList" duration-ms="8918" started-at="2017-08-30T11:13:03Z" finished-at="2017-08-30T11:13:12Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除单个PINList]]>
            </line>
          </reporter-output>
        </test-method> <!-- R_PINList -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1501" started-at="2017-08-30T11:13:12Z" finished-at="2017-08-30T11:13:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="S_PINList()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="S_PINList" duration-ms="23337" started-at="2017-08-30T11:13:13Z" finished-at="2017-08-30T11:13:37Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除Pin1]]>
            </line>
          </reporter-output>
        </test-method> <!-- S_PINList -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:13:37Z" finished-at="2017-08-30T11:13:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="T_OutboundRoutes()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="T_OutboundRoutes" duration-ms="11034" started-at="2017-08-30T11:13:38Z" finished-at="2017-08-30T11:13:49Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除单个OutboundRoutes]]>
            </line>
          </reporter-output>
        </test-method> <!-- T_OutboundRoutes -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:13:49Z" finished-at="2017-08-30T11:13:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="U_OutboundRoutes()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="U_OutboundRoutes" duration-ms="28024" started-at="2017-08-30T11:13:51Z" finished-at="2017-08-30T11:14:19Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除OutboundRoutes]]>
            </line>
          </reporter-output>
        </test-method> <!-- U_OutboundRoutes -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:14:19Z" finished-at="2017-08-30T11:14:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="V_InboundRoutes()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="V_InboundRoutes" duration-ms="8964" started-at="2017-08-30T11:14:20Z" finished-at="2017-08-30T11:14:29Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除单个inboundRoutes]]>
            </line>
          </reporter-output>
        </test-method> <!-- V_InboundRoutes -->
        <test-method status="PASS" signature="BeoforeTest()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="BeoforeTest" is-config="true" duration-ms="1500" started-at="2017-08-30T11:14:29Z" finished-at="2017-08-30T11:14:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeoforeTest -->
        <test-method status="PASS" signature="W_InboundRoutes()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="W_InboundRoutes" duration-ms="48638" started-at="2017-08-30T11:14:31Z" finished-at="2017-08-30T11:15:19Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除inboundRoutes]]>
            </line>
          </reporter-output>
        </test-method> <!-- W_InboundRoutes -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll@16aaa8d]" name="AfterClass" is-config="true" duration-ms="22188" started-at="2017-08-30T11:15:19Z" finished-at="2017-08-30T11:15:42Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.pbxcase.DeleteAll -->
      <class name="com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="BeforeClass" is-config="true" duration-ms="16871" started-at="2017-08-30T10:12:25Z" finished-at="2017-08-30T10:12:42Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备_OutboundRoutes]]>
            </line>
            <line>
              <![CDATA[    Pass: 1000分机注册]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:12:42Z" finished-at="2017-08-30T10:12:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="A_TimeCondition()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="A_TimeCondition" duration-ms="7505" started-at="2017-08-30T10:12:43Z" finished-at="2017-08-30T10:12:51Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】设置Time Conditions]]>
            </line>
            <line>
              <![CDATA[    Pass: TimeConditions名称错误]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_TimeCondition -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1001" started-at="2017-08-30T10:12:51Z" finished-at="2017-08-30T10:12:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="B_Holiday()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="B_Holiday" duration-ms="3053" started-at="2017-08-30T10:12:52Z" finished-at="2017-08-30T10:12:55Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】设置Holiday]]>
            </line>
            <line>
              <![CDATA[    Pass: TimeConditions名称错误]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_Holiday -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:12:55Z" finished-at="2017-08-30T10:12:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="C_CreateOutRoutes()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="C_CreateOutRoutes" duration-ms="42471" started-at="2017-08-30T10:12:56Z" finished-at="2017-08-30T10:13:38Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】创建呼出路由]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_CreateOutRoutes -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1001" started-at="2017-08-30T10:13:38Z" finished-at="2017-08-30T10:13:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="D_CreateDISA()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="D_CreateDISA" duration-ms="18731" started-at="2017-08-30T10:13:39Z" finished-at="2017-08-30T10:13:58Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】创建Disa]]>
            </line>
          </reporter-output>
        </test-method> <!-- D_CreateDISA -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:13:58Z" finished-at="2017-08-30T10:13:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="E_CreateIVR()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="E_CreateIVR" duration-ms="44238" started-at="2017-08-30T10:13:59Z" finished-at="2017-08-30T10:14:43Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】创建IVR]]>
            </line>
          </reporter-output>
        </test-method> <!-- E_CreateIVR -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:14:43Z" finished-at="2017-08-30T10:14:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="FAIL" signature="G_CallSip()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="G_CallSip" duration-ms="44490" started-at="2017-08-30T10:14:44Z" finished-at="2017-08-30T10:15:29Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[CDR被叫方检测 【预期：903000 实际：903000 [903000]】]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: CDR被叫方检测 【预期：903000 实际：903000 [903000]】
	at com.yeastar.swebtest.tools.ysassert.YsAssert.fail(YsAssert.java:1086)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.failNotEquals(YsAssert.java:579)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEqualsImpl(YsAssert.java:142)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:116)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:199)
	at com.yeastar.swebtest.driver.YSMethod.YS_Extension.checkCDR(YS_Extension.java:285)
	at com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes.G_CallSip(OutboundRoutes.java:191)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】Sip外线呼出 1000打 903000]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：903000 实际：903000 [903000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：903000 实际：903000 [903000]】</a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- G_CallSip -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:15:29Z" finished-at="2017-08-30T10:15:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="H_CallFail()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="H_CallFail" duration-ms="15001" started-at="2017-08-30T10:15:30Z" finished-at="2017-08-30T10:15:45Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】Sip外线呼出失败1001打903000]]>
            </line>
          </reporter-output>
        </test-method> <!-- H_CallFail -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:15:45Z" finished-at="2017-08-30T10:15:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="FAIL" signature="I_CallIax()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="I_CallIax" duration-ms="38922" started-at="2017-08-30T10:15:46Z" finished-at="2017-08-30T10:16:25Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[CDR被叫方检测 【预期：903000 实际：903000 [903000]】]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: CDR被叫方检测 【预期：903000 实际：903000 [903000]】
	at com.yeastar.swebtest.tools.ysassert.YsAssert.fail(YsAssert.java:1086)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.failNotEquals(YsAssert.java:579)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEqualsImpl(YsAssert.java:142)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:116)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:199)
	at com.yeastar.swebtest.driver.YSMethod.YS_Extension.checkCDR(YS_Extension.java:285)
	at com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes.I_CallIax(OutboundRoutes.java:223)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】IAX外线呼出1000打903000]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：903000 实际：903000 [903000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：903000 实际：903000 [903000]】</a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- I_CallIax -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:16:25Z" finished-at="2017-08-30T10:16:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="FAIL" signature="J_CallSps()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="J_CallSps" duration-ms="46871" started-at="2017-08-30T10:16:26Z" finished-at="2017-08-30T10:17:13Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[CDR被叫方检测 【预期：902000 实际：903000 [903000]】]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: CDR被叫方检测 【预期：902000 实际：903000 [903000]】
	at com.yeastar.swebtest.tools.ysassert.YsAssert.fail(YsAssert.java:1086)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.failNotEquals(YsAssert.java:579)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEqualsImpl(YsAssert.java:142)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:116)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:199)
	at com.yeastar.swebtest.driver.YSMethod.YS_Extension.checkCDR(YS_Extension.java:285)
	at com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes.J_CallSps(OutboundRoutes.java:240)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】SPS外线呼出1000打902000]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：902000 实际：903000 [903000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：902000 实际：903000 [903000]】</a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- J_CallSps -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:17:13Z" finished-at="2017-08-30T10:17:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="FAIL" signature="K_CallSpx()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="K_CallSpx" duration-ms="36828" started-at="2017-08-30T10:17:14Z" finished-at="2017-08-30T10:17:50Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[CDR被叫方检测 【预期：902000 实际：902000 [902000]】]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: CDR被叫方检测 【预期：902000 实际：902000 [902000]】
	at com.yeastar.swebtest.tools.ysassert.YsAssert.fail(YsAssert.java:1086)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.failNotEquals(YsAssert.java:579)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEqualsImpl(YsAssert.java:142)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:116)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:199)
	at com.yeastar.swebtest.driver.YSMethod.YS_Extension.checkCDR(YS_Extension.java:285)
	at com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes.K_CallSpx(OutboundRoutes.java:259)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】SPX外线呼出1000打902000]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：902000 实际：902000 [902000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：902000 实际：902000 [902000]】</a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- K_CallSpx -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:17:50Z" finished-at="2017-08-30T10:17:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="FAIL" signature="L_CallPstn()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="L_CallPstn" duration-ms="48799" started-at="2017-08-30T10:17:51Z" finished-at="2017-08-30T10:18:40Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[CDR被叫方检测 【预期：903000 实际：903000 [903000]】]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: CDR被叫方检测 【预期：903000 实际：903000 [903000]】
	at com.yeastar.swebtest.tools.ysassert.YsAssert.fail(YsAssert.java:1086)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.failNotEquals(YsAssert.java:579)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEqualsImpl(YsAssert.java:142)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:116)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:199)
	at com.yeastar.swebtest.driver.YSMethod.YS_Extension.checkCDR(YS_Extension.java:285)
	at com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes.L_CallPstn(OutboundRoutes.java:278)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】PSTN外线呼出1000打903000]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：903000 实际：903000 [903000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：903000 实际：903000 [903000]】</a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- L_CallPstn -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:18:40Z" finished-at="2017-08-30T10:18:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="FAIL" signature="M_CallBri()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="M_CallBri" duration-ms="38830" started-at="2017-08-30T10:18:41Z" finished-at="2017-08-30T10:19:20Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[CDR被叫方检测 【预期：902000 实际：902000 [902000]】]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: CDR被叫方检测 【预期：902000 实际：902000 [902000]】
	at com.yeastar.swebtest.tools.ysassert.YsAssert.fail(YsAssert.java:1086)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.failNotEquals(YsAssert.java:579)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEqualsImpl(YsAssert.java:142)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:116)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:199)
	at com.yeastar.swebtest.driver.YSMethod.YS_Extension.checkCDR(YS_Extension.java:285)
	at com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes.M_CallBri(OutboundRoutes.java:295)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】BRI外线呼出1000打903000]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：902000 实际：902000 [902000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：902000 实际：902000 [902000]】</a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- M_CallBri -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1004" started-at="2017-08-30T10:19:20Z" finished-at="2017-08-30T10:19:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="N_CallE1()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="N_CallE1" duration-ms="0" started-at="2017-08-30T10:19:21Z" finished-at="2017-08-30T10:19:21Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】E1外线呼出1000打903000]]>
            </line>
          </reporter-output>
        </test-method> <!-- N_CallE1 -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:19:21Z" finished-at="2017-08-30T10:19:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="O_CallGsm()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="O_CallGsm" duration-ms="0" started-at="2017-08-30T10:19:22Z" finished-at="2017-08-30T10:19:22Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】GSM外线呼出1000打903000]]>
            </line>
          </reporter-output>
        </test-method> <!-- O_CallGsm -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:19:22Z" finished-at="2017-08-30T10:19:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="P_PinList()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="P_PinList" duration-ms="18107" started-at="2017-08-30T10:19:23Z" finished-at="2017-08-30T10:19:41Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】呼出路由设置Pinlist]]>
            </line>
          </reporter-output>
        </test-method> <!-- P_PinList -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:19:41Z" finished-at="2017-08-30T10:19:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="FAIL" signature="Q_PinListCall()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="Q_PinListCall" duration-ms="34539" started-at="2017-08-30T10:19:42Z" finished-at="2017-08-30T10:20:17Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[CDR被叫方检测 【预期：903000 实际：903000 [903000]】]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: CDR被叫方检测 【预期：903000 实际：903000 [903000]】
	at com.yeastar.swebtest.tools.ysassert.YsAssert.fail(YsAssert.java:1086)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.failNotEquals(YsAssert.java:579)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEqualsImpl(YsAssert.java:142)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:116)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:199)
	at com.yeastar.swebtest.driver.YSMethod.YS_Extension.checkCDR(YS_Extension.java:285)
	at com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes.Q_PinListCall(OutboundRoutes.java:354)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】PinList外线呼出失败1000打903000]]>
            </line>
            <line>
              <![CDATA[    Pass: 外线呼出进入pin1List]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：903000 实际：903000 [903000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：903000 实际：903000 [903000]】</a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- Q_PinListCall -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1001" started-at="2017-08-30T10:20:17Z" finished-at="2017-08-30T10:20:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="R_PWD_None()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="R_PWD_None" duration-ms="12579" started-at="2017-08-30T10:20:18Z" finished-at="2017-08-30T10:20:30Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】设置呼出路由无Pinlist]]>
            </line>
          </reporter-output>
        </test-method> <!-- R_PWD_None -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1001" started-at="2017-08-30T10:20:30Z" finished-at="2017-08-30T10:20:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="S_PinListCall()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="S_PinListCall" duration-ms="23051" started-at="2017-08-30T10:20:31Z" finished-at="2017-08-30T10:20:54Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】设置呼出路由无Pinlist 1000拨打903000]]>
            </line>
          </reporter-output>
        </test-method> <!-- S_PinListCall -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="waitMethod" is-config="true" duration-ms="1001" started-at="2017-08-30T10:20:54Z" finished-at="2017-08-30T10:20:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="T_RoutePermission()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="T_RoutePermission" duration-ms="22491" started-at="2017-08-30T10:20:55Z" finished-at="2017-08-30T10:21:18Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】登录1000分机判断路由是否存在]]>
            </line>
          </reporter-output>
        </test-method> <!-- T_RoutePermission -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes@1712b94]" name="AfterClass" is-config="true" duration-ms="22005" started-at="2017-08-30T10:21:18Z" finished-at="2017-08-30T10:21:40Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器_OutboundRoutes]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.pbxcase.OutboundRoutes -->
      <class name="com.yeastar.swebtest.testcase.CheckToTest">
        <test-method status="PASS" signature="CleanExtensions()[pri:0, instance:com.yeastar.swebtest.testcase.CheckToTest@1d0c81b]" name="CleanExtensions" duration-ms="28514" started-at="2017-08-30T09:57:08Z" finished-at="2017-08-30T09:57:36Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】清空分机]]>
            </line>
          </reporter-output>
        </test-method> <!-- CleanExtensions -->
      </class> <!-- com.yeastar.swebtest.testcase.CheckToTest -->
      <class name="com.yeastar.swebtest.testcase.smokecase.pbxcase.CallControl">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallControl@1a8c74e]" name="BeforeClass" is-config="true" duration-ms="13324" started-at="2017-08-30T10:34:54Z" finished-at="2017-08-30T10:35:07Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="A_AutoCLIP()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallControl@1a8c74e]" name="A_AutoCLIP" duration-ms="72381" started-at="2017-08-30T10:35:07Z" finished-at="2017-08-30T10:36:19Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】编辑inrouter，Destination设置到Conference，meet1]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_AutoCLIP -->
        <test-method status="PASS" signature="B_CallBri()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallControl@1a8c74e]" name="B_CallBri" duration-ms="30126" started-at="2017-08-30T10:36:19Z" finished-at="2017-08-30T10:36:49Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】设备A 1000 call (bri) B 2000]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_CallBri -->
        <test-method status="PASS" signature="C_CallBri()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallControl@1a8c74e]" name="C_CallBri" duration-ms="24274" started-at="2017-08-30T10:36:49Z" finished-at="2017-08-30T10:37:14Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】分机2000通过bri线路呼入到设备1的1000]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_CallBri -->
        <test-method status="PASS" signature="D_DeleteViewAutoCLIP()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallControl@1a8c74e]" name="D_DeleteViewAutoCLIP" duration-ms="11958" started-at="2017-08-30T10:37:14Z" finished-at="2017-08-30T10:37:26Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除AutoCLIP记录]]>
            </line>
          </reporter-output>
        </test-method> <!-- D_DeleteViewAutoCLIP -->
        <test-method status="PASS" signature="E_CallBri()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallControl@1a8c74e]" name="E_CallBri" duration-ms="11634" started-at="2017-08-30T10:37:26Z" finished-at="2017-08-30T10:37:37Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】设备A 1000 call (bri) B 2000呼入到会议室meet1]]>
            </line>
          </reporter-output>
        </test-method> <!-- E_CallBri -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallControl@1a8c74e]" name="AfterClass" is-config="true" duration-ms="22366" started-at="2017-08-30T10:37:37Z" finished-at="2017-08-30T10:38:00Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.pbxcase.CallControl -->
      <class name="com.yeastar.swebtest.testcase.smokecase.pbxcase.NewTrunk">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.NewTrunk@11c1ea0]" name="BeforeClass" is-config="true" duration-ms="11174" started-at="2017-08-30T10:04:46Z" finished-at="2017-08-30T10:04:58Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备_NewTrunkTest]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="A_AddTrunk()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.NewTrunk@11c1ea0]" name="A_AddTrunk" duration-ms="21420" started-at="2017-08-30T10:04:58Z" finished-at="2017-08-30T10:05:19Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加SIPTrunk]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_AddTrunk -->
        <test-method status="PASS" signature="B_AddTrunkIAXTrunk()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.NewTrunk@11c1ea0]" name="B_AddTrunkIAXTrunk" duration-ms="15512" started-at="2017-08-30T10:05:19Z" finished-at="2017-08-30T10:05:34Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加IAXTrunk]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_AddTrunkIAXTrunk -->
        <test-method status="PASS" signature="C_AddSPX()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.NewTrunk@11c1ea0]" name="C_AddSPX" duration-ms="15223" started-at="2017-08-30T10:05:34Z" finished-at="2017-08-30T10:05:50Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加SPX]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_AddSPX -->
        <test-method status="PASS" signature="D_AddSPS()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.NewTrunk@11c1ea0]" name="D_AddSPS" duration-ms="15394" started-at="2017-08-30T10:05:50Z" finished-at="2017-08-30T10:06:05Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加SPS]]>
            </line>
          </reporter-output>
        </test-method> <!-- D_AddSPS -->
        <test-method status="FAIL" signature="E_SetBriTrunk()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.NewTrunk@11c1ea0]" name="E_SetBriTrunk" duration-ms="142514" started-at="2017-08-30T10:06:05Z" finished-at="2017-08-30T10:08:28Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at javax.imageio.ImageIO.write(ImageIO.java:1538)
	at com.yeastar.swebtest.tools.ScreenShot.screenShotAsFile(ScreenShot.java:48)
	at com.yeastar.swebtest.tools.ScreenShot.takeScreenshotByAll(ScreenShot.java:38)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.fail(YsAssert.java:1083)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.failNotEquals(YsAssert.java:579)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEqualsImpl(YsAssert.java:142)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:116)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:199)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:210)
	at com.yeastar.swebtest.testcase.smokecase.pbxcase.NewTrunk.E_SetBriTrunk(NewTrunk.java:85)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
            <line>
              <![CDATA[    Pass: waitReboot重启]]>
            </line>
          </reporter-output>
        </test-method> <!-- E_SetBriTrunk -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.NewTrunk@11c1ea0]" name="AfterClass" is-config="true" duration-ms="15894" started-at="2017-08-30T10:08:28Z" finished-at="2017-08-30T10:08:43Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器_NewTrunk]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.pbxcase.NewTrunk -->
      <class name="com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="BeforeClass" is-config="true" duration-ms="40076" started-at="2017-08-30T10:38:00Z" finished-at="2017-08-30T10:38:40Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备PagingFunction]]>
            </line>
            <line>
              <![CDATA[    Pass: 1000分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1100分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1101分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1102分机注册]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="A_PagingIntercom()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="A_PagingIntercom" duration-ms="42637" started-at="2017-08-30T10:38:40Z" finished-at="2017-08-30T10:39:22Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】分机B(1101)拨打6300]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_PagingIntercom -->
        <test-method status="PASS" signature="B_AddBlacklist()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="B_AddBlacklist" duration-ms="51469" started-at="2017-08-30T10:39:22Z" finished-at="2017-08-30T10:40:14Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加黑名单test1，分机2000通过sps线路呼入到设备1，呼入失败]]>
            </line>
            <line>
              <![CDATA[    Pass: 黑名单添加错误]]>
            </line>
            <line>
              <![CDATA[    Pass: 通话进入黑名单列表]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_AddBlacklist -->
        <test-method status="PASS" signature="C_ExportBlacklist()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="C_ExportBlacklist" duration-ms="1035" started-at="2017-08-30T10:40:14Z" finished-at="2017-08-30T10:40:15Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】导出黑名单]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_ExportBlacklist -->
        <test-method status="PASS" signature="D_DeleteBlacklist()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="D_DeleteBlacklist" duration-ms="52385" started-at="2017-08-30T10:40:15Z" finished-at="2017-08-30T10:41:07Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除黑名单，分机2000通过sps线路呼入到设备1，呼入成功]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- D_DeleteBlacklist -->
        <test-method status="PASS" signature="E_ImportBlacklist()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="E_ImportBlacklist" duration-ms="11140" started-at="2017-08-30T10:41:07Z" finished-at="2017-08-30T10:41:18Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】点击“Import”，选择之前导出的文件导入]]>
            </line>
            <line>
              <![CDATA[    Pass: 导入黑名单]]>
            </line>
          </reporter-output>
        </test-method> <!-- E_ImportBlacklist -->
        <test-method status="PASS" signature="F_AddWhitelist()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="F_AddWhitelist" duration-ms="57957" started-at="2017-08-30T10:41:18Z" finished-at="2017-08-30T10:42:16Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加白名单test2，分机2000通过sps线路呼入到设备1，呼入成功]]>
            </line>
            <line>
              <![CDATA[    Pass: 白名单添加错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- F_AddWhitelist -->
        <test-method status="PASS" signature="H_DelWhitelist()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="H_DelWhitelist" duration-ms="21023" started-at="2017-08-30T10:42:16Z" finished-at="2017-08-30T10:42:37Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除白名单，分机2000通过sps线路呼入到设备1，呼入失败]]>
            </line>
            <line>
              <![CDATA[    Pass: 通话进入黑名单列表]]>
            </line>
          </reporter-output>
        </test-method> <!-- H_DelWhitelist -->
        <test-method status="PASS" signature="I_ImportWhitelist()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="I_ImportWhitelist" duration-ms="11174" started-at="2017-08-30T10:42:37Z" finished-at="2017-08-30T10:42:49Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】导入白名单]]>
            </line>
            <line>
              <![CDATA[    Pass: 导入白名单]]>
            </line>
          </reporter-output>
        </test-method> <!-- I_ImportWhitelist -->
        <test-method status="PASS" signature="J_DelAllBlacklist()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="J_DelAllBlacklist" duration-ms="14424" started-at="2017-08-30T10:42:49Z" finished-at="2017-08-30T10:43:03Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除黑名单]]>
            </line>
            <line>
              <![CDATA[    Pass: 黑名单添加错误]]>
            </line>
          </reporter-output>
        </test-method> <!-- J_DelAllBlacklist -->
        <test-method status="PASS" signature="K_DelAllWhitelist()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="K_DelAllWhitelist" duration-ms="22470" started-at="2017-08-30T10:43:03Z" finished-at="2017-08-30T10:43:25Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除白名单]]>
            </line>
            <line>
              <![CDATA[    Pass: 白名单添加错误]]>
            </line>
          </reporter-output>
        </test-method> <!-- K_DelAllWhitelist -->
        <test-method status="PASS" signature="L_ExtensionPage()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="L_ExtensionPage" duration-ms="39646" started-at="2017-08-30T10:43:25Z" finished-at="2017-08-30T10:44:05Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】登录1100分机页面创建黑名单test1]]>
            </line>
            <line>
              <![CDATA[    Pass: 进入黑名单列表]]>
            </line>
          </reporter-output>
        </test-method> <!-- L_ExtensionPage -->
        <test-method status="PASS" signature="N_DeleteTest1Sps()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="N_DeleteTest1Sps" duration-ms="21387" started-at="2017-08-30T10:44:05Z" finished-at="2017-08-30T10:44:26Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】1100分机页面，删除黑名单test1，分机2000通过sps呼入到设备1，呼入成功]]>
            </line>
          </reporter-output>
        </test-method> <!-- N_DeleteTest1Sps -->
        <test-method status="PASS" signature="O_BlacklistImport()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="O_BlacklistImport" duration-ms="21211" started-at="2017-08-30T10:44:26Z" finished-at="2017-08-30T10:44:48Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】1100分机页面，点击“Import”，选择之前导出黑名单的文件导入]]>
            </line>
            <line>
              <![CDATA[    Pass: 分机页面导入黑名单]]>
            </line>
          </reporter-output>
        </test-method> <!-- O_BlacklistImport -->
        <test-method status="PASS" signature="P_ExtensionWhitelist()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="P_ExtensionWhitelist" duration-ms="39293" started-at="2017-08-30T10:44:48Z" finished-at="2017-08-30T10:45:27Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】1100分机页面，删除黑名单test1，分机2000通过sps呼入到设备1，呼入成功]]>
            </line>
          </reporter-output>
        </test-method> <!-- P_ExtensionWhitelist -->
        <test-method status="PASS" signature="R_WhiteTest1Delete()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="R_WhiteTest1Delete" duration-ms="12467" started-at="2017-08-30T10:45:27Z" finished-at="2017-08-30T10:45:39Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】1100分机页面，删除白名单，分机2000通过sps呼入到设备1，呼入失败]]>
            </line>
            <line>
              <![CDATA[    Pass: 进入黑名单列表]]>
            </line>
          </reporter-output>
        </test-method> <!-- R_WhiteTest1Delete -->
        <test-method status="PASS" signature="S_WhiteImport()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="S_WhiteImport" duration-ms="10908" started-at="2017-08-30T10:45:39Z" finished-at="2017-08-30T10:45:50Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】1100分机页面，导入白名单]]>
            </line>
          </reporter-output>
        </test-method> <!-- S_WhiteImport -->
        <test-method status="PASS" signature="T_BlacklistDeleteAll()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="T_BlacklistDeleteAll" duration-ms="22494" started-at="2017-08-30T10:45:50Z" finished-at="2017-08-30T10:46:13Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】1100分机页面，批量删除黑名单]]>
            </line>
          </reporter-output>
        </test-method> <!-- T_BlacklistDeleteAll -->
        <test-method status="PASS" signature="U_WhitelistDeleteAll()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="U_WhitelistDeleteAll" duration-ms="22761" started-at="2017-08-30T10:46:13Z" finished-at="2017-08-30T10:46:36Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】1100分机页面，批量删除白名单]]>
            </line>
          </reporter-output>
        </test-method> <!-- U_WhitelistDeleteAll -->
        <test-method status="PASS" signature="V_OnlyWhitelistCheck()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="V_OnlyWhitelistCheck" duration-ms="7232" started-at="2017-08-30T10:46:36Z" finished-at="2017-08-30T10:46:43Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】1100分机页面，勾选OnlyWhitelist，分机2000通过sps呼入到设备1，呼入失败]]>
            </line>
            <line>
              <![CDATA[    Pass: 进入黑名单列表]]>
            </line>
          </reporter-output>
        </test-method> <!-- V_OnlyWhitelistCheck -->
        <test-method status="PASS" signature="W_OnlyWhitelistUnCheck()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="W_OnlyWhitelistUnCheck" duration-ms="6774" started-at="2017-08-30T10:46:43Z" finished-at="2017-08-30T10:46:50Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】1100分机页面，取消勾选OnlyWhitelist，分机2000通过sps呼入到设备1，呼入成功]]>
            </line>
          </reporter-output>
        </test-method> <!-- W_OnlyWhitelistUnCheck -->
        <test-method status="FAIL" signature="X_AddSpeedDial()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="X_AddSpeedDial" duration-ms="81446" started-at="2017-08-30T10:46:50Z" finished-at="2017-08-30T10:48:11Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[CDR呼叫方检测 【预期：1000 [1000] 实际：2000 [2000]】]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: CDR呼叫方检测 【预期：1000 [1000] 实际：2000 [2000]】
	at com.yeastar.swebtest.tools.ysassert.YsAssert.fail(YsAssert.java:1086)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.failNotEquals(YsAssert.java:579)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEqualsImpl(YsAssert.java:142)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:116)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:199)
	at com.yeastar.swebtest.driver.YSMethod.YS_Extension.checkCDR(YS_Extension.java:284)
	at com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction.X_AddSpeedDial(CallFunction.java:426)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加快速拨号，分机1000拨打*991]]>
            </line>
            <line>
              <![CDATA[    Pass: 添加speed_dial_name]]>
            </line>
            <line>
              <![CDATA[    Pass: 添加speed_dial_phoneNumber]]>
            </line>
            <line>
              <![CDATA[    <a href="file:///F:\pic\CDR呼叫方检测 【预期：1000 [1000] 实际：2000 [2000]】.jpg" target="_blank">Error: CDR呼叫方检测 【预期：1000 [1000] 实际：2000 [2000]】</a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- X_AddSpeedDial -->
        <test-method status="PASS" signature="Y_ExportSpeedDial()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="Y_ExportSpeedDial" duration-ms="974" started-at="2017-08-30T10:48:11Z" finished-at="2017-08-30T10:48:12Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】导出快速拨号列表]]>
            </line>
          </reporter-output>
        </test-method> <!-- Y_ExportSpeedDial -->
        <test-method status="PASS" signature="Z_DeleteSpeedDial()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="Z_DeleteSpeedDial" duration-ms="42483" started-at="2017-08-30T10:48:12Z" finished-at="2017-08-30T10:48:55Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除快速拨号列表第一条，分机1000，拨打*991]]>
            </line>
          </reporter-output>
        </test-method> <!-- Z_DeleteSpeedDial -->
        <test-method status="PASS" signature="a_ImportSpeedDial()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="a_ImportSpeedDial" duration-ms="11633" started-at="2017-08-30T10:48:55Z" finished-at="2017-08-30T10:49:06Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】导入快速拨号列表]]>
            </line>
          </reporter-output>
        </test-method> <!-- a_ImportSpeedDial -->
        <test-method status="PASS" signature="b_DeleteAllSpeedDial()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="b_DeleteAllSpeedDial" duration-ms="30765" started-at="2017-08-30T10:49:06Z" finished-at="2017-08-30T10:49:37Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除快速拨号列表]]>
            </line>
            <line>
              <![CDATA[    Pass: 添加speed_dial_name]]>
            </line>
            <line>
              <![CDATA[    Pass: 添加speed_dial_phoneNumber]]>
            </line>
          </reporter-output>
        </test-method> <!-- b_DeleteAllSpeedDial -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction@18f65a4]" name="AfterClass" is-config="true" duration-ms="22431" started-at="2017-08-30T10:49:37Z" finished-at="2017-08-30T10:49:59Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器PagingFunction]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.pbxcase.CallFunction -->
      <class name="com.yeastar.swebtest.testcase.smokecase.pbxcase.FeatureCode">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FeatureCode@6d64ab]" name="BeforeClass" is-config="true" duration-ms="32358" started-at="2017-08-30T10:55:12Z" finished-at="2017-08-30T10:55:44Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备]]>
            </line>
            <line>
              <![CDATA[    Pass: 1100分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1101分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1102分机注册]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="F_Transfer()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FeatureCode@6d64ab]" name="F_Transfer" duration-ms="66302" started-at="2017-08-30T10:55:44Z" finished-at="2017-08-30T10:56:50Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】Transfer：分机A打给分机B，通过过程中，A拨打*3C]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- F_Transfer -->
        <test-method status="PASS" signature="G_Transfer()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FeatureCode@6d64ab]" name="G_Transfer" duration-ms="59527" started-at="2017-08-30T10:56:50Z" finished-at="2017-08-30T10:57:50Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】Transfer：分机A打给分机B，通过过程中，A拨打*03C]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- G_Transfer -->
        <test-method status="PASS" signature="H_CallPickup()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FeatureCode@6d64ab]" name="H_CallPickup" duration-ms="48962" started-at="2017-08-30T10:57:50Z" finished-at="2017-08-30T10:58:39Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】CallPickup：分机A打给C，分机C响铃中，分机B拨打*04C截答]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- H_CallPickup -->
        <test-method status="PASS" signature="I_CallPickup()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FeatureCode@6d64ab]" name="I_CallPickup" duration-ms="46348" started-at="2017-08-30T10:58:39Z" finished-at="2017-08-30T10:59:25Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】CallPickup：分机C打给分机B，分机B响铃中，分机A拨打*4截答]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- I_CallPickup -->
        <test-method status="PASS" signature="J_CallParking()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FeatureCode@6d64ab]" name="J_CallParking" duration-ms="75254" started-at="2017-08-30T10:59:25Z" finished-at="2017-08-30T11:00:41Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】CallParking：分机A打给分机B，通话过程中，A拨打*6，15s后，分机A拨打6900]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- J_CallParking -->
        <test-method status="PASS" signature="K_CallParking()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FeatureCode@6d64ab]" name="K_CallParking" duration-ms="82927" started-at="2017-08-30T11:00:41Z" finished-at="2017-08-30T11:02:04Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】CallParking：分机A打给分机B，通话过程中，分机A拨打*066950，15s后，分机A拨打6950]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- K_CallParking -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.FeatureCode@6d64ab]" name="AfterClass" is-config="true" duration-ms="22140" started-at="2017-08-30T11:02:04Z" finished-at="2017-08-30T11:02:26Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.pbxcase.FeatureCode -->
      <class name="com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="BeforeClass" is-config="true" duration-ms="31701" started-at="2017-08-30T10:49:59Z" finished-at="2017-08-30T10:50:31Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备VoicePrompts]]>
            </line>
            <line>
              <![CDATA[    Pass: 1100分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1101分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1102分机注册]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="A_SystemPrompt()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="A_SystemPrompt" duration-ms="45018" started-at="2017-08-30T10:50:31Z" finished-at="2017-08-30T10:51:16Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】Default选择上传的一个提示音]]>
            </line>
            <line>
              <![CDATA[    Pass: 提示音更换]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_SystemPrompt -->
        <test-method status="PASS" signature="B_MusicOnHold()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="B_MusicOnHold" duration-ms="17287" started-at="2017-08-30T10:51:16Z" finished-at="2017-08-30T10:51:33Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】选择Music on Hold提示音列表的第一个提示音，点击“Play”在1100播放]]>
            </line>
            <line>
              <![CDATA[    Pass: 等待音乐播放]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_MusicOnHold -->
        <test-method status="PASS" signature="C_DeleteMusicOnHold()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="C_DeleteMusicOnHold" duration-ms="15979" started-at="2017-08-30T10:51:33Z" finished-at="2017-08-30T10:51:49Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除Music on Hold提示音列表的第一个提示音]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_DeleteMusicOnHold -->
        <test-method status="PASS" signature="D_CreateNewPlaylist()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="D_CreateNewPlaylist" duration-ms="15565" started-at="2017-08-30T10:51:49Z" finished-at="2017-08-30T10:52:05Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】创建一个新的playlist]]>
            </line>
            <line>
              <![CDATA[    Pass: play1新增的等待提示音列表为空]]>
            </line>
          </reporter-output>
        </test-method> <!-- D_CreateNewPlaylist -->
        <test-method status="PASS" signature="E_UploadMusicOnHold()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="E_UploadMusicOnHold" duration-ms="29900" started-at="2017-08-30T10:52:05Z" finished-at="2017-08-30T10:52:35Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】新的playlist上传音乐molihua.wav]]>
            </line>
            <line>
              <![CDATA[    Pass: play1等待音乐播放]]>
            </line>
          </reporter-output>
        </test-method> <!-- E_UploadMusicOnHold -->
        <test-method status="PASS" signature="F_SelectPlay1()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="F_SelectPlay1" duration-ms="17245" started-at="2017-08-30T10:52:35Z" finished-at="2017-08-30T10:52:52Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】Voice Prompts->Prompt Preference中的Music on Hold选择play1,分机1100拨打6400]]>
            </line>
            <line>
              <![CDATA[    Pass: 播放play1中的xxx提示音]]>
            </line>
          </reporter-output>
        </test-method> <!-- F_SelectPlay1 -->
        <test-method status="PASS" signature="G_DeleteMusicOnHold()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="G_DeleteMusicOnHold" duration-ms="9507" started-at="2017-08-30T10:52:52Z" finished-at="2017-08-30T10:53:02Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】全选所有提示音，点击“Delete”]]>
            </line>
          </reporter-output>
        </test-method> <!-- G_DeleteMusicOnHold -->
        <test-method status="PASS" signature="H_RecordNew()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="H_RecordNew" duration-ms="34367" started-at="2017-08-30T10:53:02Z" finished-at="2017-08-30T10:53:36Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】录一个新的录音作为提示音]]>
            </line>
            <line>
              <![CDATA[    Pass: RecordFile 开始录音]]>
            </line>
            <line>
              <![CDATA[    Pass: 自定义提示音生成]]>
            </line>
          </reporter-output>
        </test-method> <!-- H_RecordNew -->
        <test-method status="PASS" signature="I_UploadCustomPromts()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="I_UploadCustomPromts" duration-ms="21107" started-at="2017-08-30T10:53:36Z" finished-at="2017-08-30T10:53:57Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】上传一个音乐作为提示音]]>
            </line>
            <line>
              <![CDATA[    Pass: custom Prompts音乐播放]]>
            </line>
          </reporter-output>
        </test-method> <!-- I_UploadCustomPromts -->
        <test-method status="PASS" signature="J_SelectCustomPromts()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="J_SelectCustomPromts" duration-ms="24862" started-at="2017-08-30T10:53:57Z" finished-at="2017-08-30T10:54:22Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】上传一个音乐作为提示音]]>
            </line>
            <line>
              <![CDATA[    Pass: custom record重新录音]]>
            </line>
          </reporter-output>
        </test-method> <!-- J_SelectCustomPromts -->
        <test-method status="PASS" signature="K_DownloadCustom()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="K_DownloadCustom" duration-ms="6340" started-at="2017-08-30T10:54:22Z" finished-at="2017-08-30T10:54:28Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】下载自定义提示音]]>
            </line>
          </reporter-output>
        </test-method> <!-- K_DownloadCustom -->
        <test-method status="PASS" signature="L_DeleteCustom()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="L_DeleteCustom" duration-ms="6148" started-at="2017-08-30T10:54:28Z" finished-at="2017-08-30T10:54:34Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除第一个自定义提示音]]>
            </line>
          </reporter-output>
        </test-method> <!-- L_DeleteCustom -->
        <test-method status="PASS" signature="M_DeleteAllCustom()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="M_DeleteAllCustom" duration-ms="15344" started-at="2017-08-30T10:54:34Z" finished-at="2017-08-30T10:54:50Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除全部自定义提示音]]>
            </line>
          </reporter-output>
        </test-method> <!-- M_DeleteAllCustom -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts@168ddbd]" name="AfterClass" is-config="true" duration-ms="22090" started-at="2017-08-30T10:54:50Z" finished-at="2017-08-30T10:55:12Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器_VoicePrompts]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.pbxcase.VoicePrompts -->
      <class name="com.yeastar.swebtest.testcase.smokecase.pbxcase.EmergencyNumberTest">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.EmergencyNumberTest@19e5ddf]" name="BeforeClass" is-config="true" duration-ms="31419" started-at="2017-08-30T11:02:26Z" finished-at="2017-08-30T11:02:57Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备]]>
            </line>
            <line>
              <![CDATA[    Pass: 1100分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1101分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1102分机注册]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="A_addEmergencyNumber()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.EmergencyNumberTest@19e5ddf]" name="A_addEmergencyNumber" duration-ms="38488" started-at="2017-08-30T11:02:57Z" finished-at="2017-08-30T11:03:36Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加紧急呼叫号码]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_addEmergencyNumber -->
        <test-method status="FAIL" signature="B_CallEmergencyNumber()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.EmergencyNumberTest@19e5ddf]" name="B_CallEmergencyNumber" duration-ms="87321" started-at="2017-08-30T11:03:36Z" finished-at="2017-08-30T11:05:03Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[CDR被叫方检测 【预期：902000 实际：902000 [902000]】]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: CDR被叫方检测 【预期：902000 实际：902000 [902000]】
	at com.yeastar.swebtest.tools.ysassert.YsAssert.fail(YsAssert.java:1086)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.failNotEquals(YsAssert.java:579)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEqualsImpl(YsAssert.java:142)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:116)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:199)
	at com.yeastar.swebtest.driver.YSMethod.YS_Extension.checkCDR(YS_Extension.java:294)
	at com.yeastar.swebtest.testcase.smokecase.pbxcase.EmergencyNumberTest.B_CallEmergencyNumber(EmergencyNumberTest.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】分机C通过PSTN线路呼出，通话中。分机1100直接拨打紧急号码2001]]>
            </line>
            <line>
              <![CDATA[    Pass: 进入紧急呼叫]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：902000 实际：902000 [902000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：902000 实际：902000 [902000]】</a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_CallEmergencyNumber -->
        <test-method status="PASS" signature="C_DeleteEmergencyNumber()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.EmergencyNumberTest@19e5ddf]" name="C_DeleteEmergencyNumber" duration-ms="45061" started-at="2017-08-30T11:05:03Z" finished-at="2017-08-30T11:05:48Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除紧急号码]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_DeleteEmergencyNumber -->
        <test-method status="PASS" signature="D_DeleteAllEmergencyNumber()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.EmergencyNumberTest@19e5ddf]" name="D_DeleteAllEmergencyNumber" duration-ms="52828" started-at="2017-08-30T11:05:48Z" finished-at="2017-08-30T11:06:41Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量删除紧急号码]]>
            </line>
          </reporter-output>
        </test-method> <!-- D_DeleteAllEmergencyNumber -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.EmergencyNumberTest@19e5ddf]" name="AfterClass" is-config="true" duration-ms="22211" started-at="2017-08-30T11:06:41Z" finished-at="2017-08-30T11:07:03Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.pbxcase.EmergencyNumberTest -->
      <class name="com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="BeforeClass" is-config="true" duration-ms="12603" started-at="2017-08-30T10:21:40Z" finished-at="2017-08-30T10:21:52Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备_InboundRoutesTest]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:21:52Z" finished-at="2017-08-30T10:21:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="A_EmailSettings()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="A_EmailSettings" duration-ms="11067" started-at="2017-08-30T10:21:53Z" finished-at="2017-08-30T10:22:04Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】设置Email]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_EmailSettings -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="waitMethod" is-config="true" duration-ms="1001" started-at="2017-08-30T10:22:04Z" finished-at="2017-08-30T10:22:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="B_CreateInboundRoutes()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="B_CreateInboundRoutes" duration-ms="78277" started-at="2017-08-30T10:22:05Z" finished-at="2017-08-30T10:23:24Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】创建呼入路由]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_CreateInboundRoutes -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:23:24Z" finished-at="2017-08-30T10:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="C_RegisterExtensions()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="C_RegisterExtensions" duration-ms="19888" started-at="2017-08-30T10:23:25Z" finished-at="2017-08-30T10:23:45Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】注册测试分机]]>
            </line>
            <line>
              <![CDATA[    Pass: 1100分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1101分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1102分机注册]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_RegisterExtensions -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:23:45Z" finished-at="2017-08-30T10:23:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="D_CallSip()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="D_CallSip" duration-ms="49822" started-at="2017-08-30T10:23:46Z" finished-at="2017-08-30T10:24:35Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】设备3通过sip外线呼入到设备1，听到IVR提示音后，按0]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- D_CallSip -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:24:35Z" finished-at="2017-08-30T10:24:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="E_CallIax()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="E_CallIax" duration-ms="44941" started-at="2017-08-30T10:24:36Z" finished-at="2017-08-30T10:25:21Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】设备3通过iax外线呼入到设备1，听到IVR的提示音后，按1]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- E_CallIax -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:25:21Z" finished-at="2017-08-30T10:25:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="F_CallSps()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="F_CallSps" duration-ms="93965" started-at="2017-08-30T10:25:22Z" finished-at="2017-08-30T10:26:56Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】设备2通过sps外线呼入到设备1，听到IVR的提示音后，按2]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- F_CallSps -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:26:56Z" finished-at="2017-08-30T10:26:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="G_CallSpx()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="G_CallSpx" duration-ms="52093" started-at="2017-08-30T10:26:57Z" finished-at="2017-08-30T10:27:49Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】A拨打90+分机号码（设备3的分机），SPX通话]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- G_CallSpx -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:27:49Z" finished-at="2017-08-30T10:27:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="H_CallGsm()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="H_CallGsm" duration-ms="0" started-at="2017-08-30T10:27:50Z" finished-at="2017-08-30T10:27:50Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】A拨打90+分机号码（设备3的分机），GSM通话]]>
            </line>
          </reporter-output>
        </test-method> <!-- H_CallGsm -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:27:50Z" finished-at="2017-08-30T10:27:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="FAIL" signature="I_CallPstn()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="I_CallPstn" duration-ms="51712" started-at="2017-08-30T10:27:51Z" finished-at="2017-08-30T10:28:43Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[CDR被叫方检测 【预期：903000 实际：903000 [903000]】]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: CDR被叫方检测 【预期：903000 实际：903000 [903000]】
	at com.yeastar.swebtest.tools.ysassert.YsAssert.fail(YsAssert.java:1086)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.failNotEquals(YsAssert.java:579)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEqualsImpl(YsAssert.java:142)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:116)
	at com.yeastar.swebtest.tools.ysassert.YsAssert.assertEquals(YsAssert.java:199)
	at com.yeastar.swebtest.driver.YSMethod.YS_Extension.checkCDR(YS_Extension.java:285)
	at com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes.I_CallPstn(InboundRoutes.java:231)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】A拨打90+分机号码（设备3的分机），PSTN通话]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    <a href="file:///F:\pic\CDR被叫方检测 【预期：903000 实际：903000 [903000]】.jpg" target="_blank">Error: CDR被叫方检测 【预期：903000 实际：903000 [903000]】</a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- I_CallPstn -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="waitMethod" is-config="true" duration-ms="1001" started-at="2017-08-30T10:28:43Z" finished-at="2017-08-30T10:28:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="J_CallE1()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="J_CallE1" duration-ms="0" started-at="2017-08-30T10:28:44Z" finished-at="2017-08-30T10:28:44Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】A拨打90+分机号码（设备3的分机），E1通话]]>
            </line>
          </reporter-output>
        </test-method> <!-- J_CallE1 -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="waitMethod" is-config="true" duration-ms="1001" started-at="2017-08-30T10:28:44Z" finished-at="2017-08-30T10:28:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="K_SetDidSps()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="K_SetDidSps" duration-ms="35080" started-at="2017-08-30T10:28:45Z" finished-at="2017-08-30T10:29:20Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】编辑呼入路由,设置DID]]>
            </line>
          </reporter-output>
        </test-method> <!-- K_SetDidSps -->
        <test-method status="PASS" signature="waitMethod()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="waitMethod" is-config="true" duration-ms="1000" started-at="2017-08-30T10:29:20Z" finished-at="2017-08-30T10:29:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- waitMethod -->
        <test-method status="PASS" signature="L_CallDidSps()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="L_CallDidSps" duration-ms="33319" started-at="2017-08-30T10:29:21Z" finished-at="2017-08-30T10:29:55Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】设备2通过sps外线呼入到设备（呼出前缀后+分机B）]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- L_CallDidSps -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes@33cc44]" name="AfterClass" is-config="true" duration-ms="22075" started-at="2017-08-30T10:29:55Z" finished-at="2017-08-30T10:30:17Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器InboundRoutesTest]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.pbxcase.InboundRoutes -->
      <class name="com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension">
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension@cdbdf5]" name="BeforeClass" is-config="true" duration-ms="13702" started-at="2017-08-30T09:57:36Z" finished-at="2017-08-30T09:57:50Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景初始化】打开游览器并登录设备_ExtensionTest]]>
            </line>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="A_SettingSystemTime()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension@cdbdf5]" name="A_SettingSystemTime" duration-ms="130397" started-at="2017-08-30T09:57:50Z" finished-at="2017-08-30T10:00:00Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】设置系统时间为9点整]]>
            </line>
            <line>
              <![CDATA[    Pass: waitReboot重启]]>
            </line>
          </reporter-output>
        </test-method> <!-- A_SettingSystemTime -->
        <test-method status="PASS" signature="B_CreateExtension()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension@cdbdf5]" name="B_CreateExtension" duration-ms="19553" started-at="2017-08-30T10:00:00Z" finished-at="2017-08-30T10:00:20Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】创建1000分机]]>
            </line>
          </reporter-output>
        </test-method> <!-- B_CreateExtension -->
        <test-method status="PASS" signature="C_CreateFxsExtension()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension@cdbdf5]" name="C_CreateFxsExtension" duration-ms="15620" started-at="2017-08-30T10:00:20Z" finished-at="2017-08-30T10:00:36Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】创建FXS分机1001]]>
            </line>
          </reporter-output>
        </test-method> <!-- C_CreateFxsExtension -->
        <test-method status="PASS" signature="D_CreateBulkExtensions()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension@cdbdf5]" name="D_CreateBulkExtensions" duration-ms="24758" started-at="2017-08-30T10:00:36Z" finished-at="2017-08-30T10:01:00Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】批量创建分机1100-1109]]>
            </line>
          </reporter-output>
        </test-method> <!-- D_CreateBulkExtensions -->
        <test-method status="PASS" signature="E_RegisterExtension()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension@cdbdf5]" name="E_RegisterExtension" duration-ms="64610" started-at="2017-08-30T10:01:00Z" finished-at="2017-08-30T10:02:05Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】SIP分机1000拨打SIP分机1001，通话]]>
            </line>
            <line>
              <![CDATA[    Pass: 1000分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1001分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- E_RegisterExtension -->
        <test-method status="PASS" signature="F_ExportExtensions()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension@cdbdf5]" name="F_ExportExtensions" duration-ms="4255" started-at="2017-08-30T10:02:05Z" finished-at="2017-08-30T10:02:09Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】导出分机列表]]>
            </line>
          </reporter-output>
        </test-method> <!-- F_ExportExtensions -->
        <test-method status="PASS" signature="G_DelExtension()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension@cdbdf5]" name="G_DelExtension" duration-ms="11558" started-at="2017-08-30T10:02:09Z" finished-at="2017-08-30T10:02:21Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除1000分机]]>
            </line>
          </reporter-output>
        </test-method> <!-- G_DelExtension -->
        <test-method status="PASS" signature="H_DelExteiosns()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension@cdbdf5]" name="H_DelExteiosns" duration-ms="10841" started-at="2017-08-30T10:02:21Z" finished-at="2017-08-30T10:02:32Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】删除所有分机]]>
            </line>
          </reporter-output>
        </test-method> <!-- H_DelExteiosns -->
        <test-method status="PASS" signature="I_ImportExtension()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension@cdbdf5]" name="I_ImportExtension" duration-ms="35798" started-at="2017-08-30T10:02:32Z" finished-at="2017-08-30T10:03:07Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】导入分机列表]]>
            </line>
            <line>
              <![CDATA[    Pass: 1000分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 1001分机注册]]>
            </line>
            <line>
              <![CDATA[    Pass: 导入分机列表]]>
            </line>
          </reporter-output>
        </test-method> <!-- I_ImportExtension -->
        <test-method status="PASS" signature="J_PstnCall()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension@cdbdf5]" name="J_PstnCall" duration-ms="54377" started-at="2017-08-30T10:03:07Z" finished-at="2017-08-30T10:04:02Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】通过PSTN外线B设备2000拨打A设备1000]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR呼叫方检测]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR被叫方检测错误]]>
            </line>
            <line>
              <![CDATA[    Pass: CDR_Status检测]]>
            </line>
          </reporter-output>
        </test-method> <!-- J_PstnCall -->
        <test-method status="PASS" signature="K_ExtensionGroupSetting()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension@cdbdf5]" name="K_ExtensionGroupSetting" duration-ms="32170" started-at="2017-08-30T10:04:02Z" finished-at="2017-08-30T10:04:34Z">
          <reporter-output>
            <line>
              <![CDATA[  【执行操作】添加分机组extgroup1]]>
            </line>
          </reporter-output>
        </test-method> <!-- K_ExtensionGroupSetting -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension@cdbdf5]" name="AfterClass" is-config="true" duration-ms="12351" started-at="2017-08-30T10:04:34Z" finished-at="2017-08-30T10:04:46Z">
          <reporter-output>
            <line>
              <![CDATA[【测试类场景恢复】关闭游览器]]>
            </line>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- com.yeastar.swebtest.testcase.smokecase.pbxcase.Extension -->
    </test> <!-- pbxcore -->
  </suite> <!-- PBXCORE -->
</testng-results>
